!(function (a) {
  if ("object" == typeof exports && "undefined" != typeof module)
    module.exports = a();
  else if ("function" == typeof define && define.amd) define([], a);
  else {
    var b;
    (b =
      "undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : "undefined" != typeof self
        ? self
        : this),
      (b.ucumPkg = a());
  }
})(function () {
  return (function () {
    function a(b, c, d) {
      function e(g, h) {
        if (!c[g]) {
          if (!b[g]) {
            var i = "function" == typeof require && require;
            if (!h && i) return i(g, !0);
            if (f) return f(g, !0);
            var j = new Error("Cannot find module '" + g + "'");
            throw ((j.code = "MODULE_NOT_FOUND"), j);
          }
          var k = (c[g] = { exports: {} });
          b[g][0].call(
            k.exports,
            function (a) {
              return e(b[g][1][a] || a);
            },
            k,
            k.exports,
            a,
            b,
            c,
            d
          );
        }
        return c[g].exports;
      }
      for (
        var f = "function" == typeof require && require, g = 0;
        g < d.length;
        g++
      )
        e(d[g]);
      return e;
    }
    return a;
  })()(
    {
      2: [
        function (a, b, c) {
          "use strict";
          b.exports =
            Number.isFinite ||
            function (a) {
              return !(
                "number" != typeof a ||
                a !== a ||
                a === 1 / 0 ||
                a === -1 / 0
              );
            };
        },
        {},
      ],
      3: [
        function (a, b, c) {
          var d = a("is-finite");
          b.exports =
            Number.isInteger ||
            function (a) {
              return "number" == typeof a && d(a) && Math.floor(a) === a;
            };
        },
        { "is-finite": 2 },
      ],
      4: [
        function (a, b, c) {
          "use strict";
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.Ucum = void 0);
          var d = {
            dimLen_: 7,
            validOps_: [".", "/"],
            codeSep_: ": ",
            valMsgStart_: "Did you mean ",
            valMsgEnd_: "?",
            cnvMsgStart_: "We assumed you meant ",
            cnvMsgEnd_: ".",
            openEmph_: " ->",
            closeEmph_: "<- ",
            openEmphHTML_: '<span class="emphSpan">',
            closeEmphHTML_: "</span>",
            bracesMsg_:
              "FYI - annotations (text in curly braces {}) are ignored, except that an annotation without a leading symbol implies the default unit 1 (the unity).",
            needMoleWeightMsg_:
              "Did you wish to convert between mass and moles?  The molecular weight of the substance represented by the units is required to perform the conversion.",
            csvCols_: {
              "case-sensitive code": "csCode_",
              "LOINC property": "loincProperty_",
              "name (display)": "name_",
              synonyms: "synonyms_",
              source: "source_",
              category: "category_",
              Guidance: "guidance_",
            },
            inputKey_: "case-sensitive code",
            specUnits_: {
              "B[10.nV]": "specialUnitOne",
              "[m/s2/Hz^(1/2)]": "specialUnitTwo",
            },
          };
          c.Ucum = d;
        },
        {},
      ],
      5: [
        function (a, b, c) {
          "use strict";
          function d(a) {
            "@babel/helpers - typeof";
            return (d =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (a) {
                    return typeof a;
                  }
                : function (a) {
                    return a &&
                      "function" == typeof Symbol &&
                      a.constructor === Symbol &&
                      a !== Symbol.prototype
                      ? "symbol"
                      : typeof a;
                  })(a);
          }
          function e(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function f(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function g(a, b, c) {
            return b && f(a.prototype, b), c && f(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.Dimension = void 0);
          var h = a("./config.js"),
            i = a("is-integer"),
            j = (function () {
              function a(b) {
                if ((e(this, a), 0 === h.Ucum.dimLen_))
                  throw new Error(
                    "Dimension.setDimensionLen must be called before Dimension constructor"
                  );
                if (void 0 === b || null === b) this.assignZero();
                else if (b instanceof Array) {
                  if (b.length !== h.Ucum.dimLen_)
                    throw new Error(
                      "Parameter error, incorrect length of vector passed to " +
                        "Dimension constructor, vector = ".concat(
                          JSON.stringify(b)
                        )
                    );
                  this.dimVec_ = [];
                  for (var c = 0; c < h.Ucum.dimLen_; c++)
                    this.dimVec_.push(b[c]);
                } else if (i(b)) {
                  if (b < 0 || b >= h.Ucum.dimLen_)
                    throw new Error(
                      "Parameter error, invalid element number specified for Dimension constructor"
                    );
                  this.assignZero(), (this.dimVec_[b] = 1);
                }
              }
              return (
                g(a, [
                  {
                    key: "setElementAt",
                    value: function (a, b) {
                      if (!i(a) || a < 0 || a >= h.Ucum.dimLen_)
                        throw new Error(
                          "Dimension.setElementAt called with an invalid index " +
                            "position (".concat(a, ")")
                        );
                      this.dimVec_ || this.assignZero(),
                        (void 0 !== b && null !== b) || (b = 1),
                        (this.dimVec_[a] = b);
                    },
                  },
                  {
                    key: "getElementAt",
                    value: function (a) {
                      if (!i(a) || a < 0 || a >= h.Ucum.dimLen_)
                        throw new Error(
                          "Dimension.getElementAt called with an invalid index " +
                            "position (".concat(a, ")")
                        );
                      var b = null;
                      return this.dimVec_ && (b = this.dimVec_[a]), b;
                    },
                  },
                  {
                    key: "getProperty",
                    value: function (a) {
                      return this["_" === a.charAt(a.length - 1) ? a : a + "_"];
                    },
                  },
                  {
                    key: "toString",
                    value: function () {
                      var a = null;
                      return (
                        this.dimVec_ &&
                          (a = "[" + this.dimVec_.join(", ") + "]"),
                        a
                      );
                    },
                  },
                  {
                    key: "add",
                    value: function (b) {
                      if (!b instanceof a)
                        throw new Error(
                          "Dimension.add called with an invalid parameter - " +
                            "".concat(d(b), " instead of a Dimension object")
                        );
                      if (this.dimVec_ && b.dimVec_)
                        for (var c = 0; c < h.Ucum.dimLen_; c++)
                          this.dimVec_[c] += b.dimVec_[c];
                      return this;
                    },
                  },
                  {
                    key: "sub",
                    value: function (b) {
                      if (!b instanceof a)
                        throw new Error(
                          "Dimension.sub called with an invalid parameter - " +
                            "".concat(d(b), " instead of a Dimension object")
                        );
                      if (this.dimVec_ && b.dimVec_)
                        for (var c = 0; c < h.Ucum.dimLen_; c++)
                          this.dimVec_[c] -= b.dimVec_[c];
                      return this;
                    },
                  },
                  {
                    key: "minus",
                    value: function () {
                      if (this.dimVec_)
                        for (var a = 0; a < h.Ucum.dimLen_; a++)
                          this.dimVec_[a] = -this.dimVec_[a];
                      return this;
                    },
                  },
                  {
                    key: "mul",
                    value: function (a) {
                      if (!i(a))
                        throw new Error(
                          "Dimension.sub called with an invalid parameter - " +
                            "".concat(
                              "undefined" == typeof dim2
                                ? "undefined"
                                : d(dim2),
                              " instead of a number"
                            )
                        );
                      if (this.dimVec_)
                        for (var b = 0; b < h.Ucum.dimLen_; b++)
                          this.dimVec_[b] *= a;
                      return this;
                    },
                  },
                  {
                    key: "equals",
                    value: function (b) {
                      if (!b instanceof a)
                        throw new Error(
                          "Dimension.equals called with an invalid parameter - " +
                            "".concat(d(b), " instead of a Dimension object")
                        );
                      var c = !0,
                        e = b.dimVec_;
                      if (this.dimVec_ && e)
                        for (var f = 0; c && f < h.Ucum.dimLen_; f++)
                          c = this.dimVec_[f] === e[f];
                      else c = null === this.dimVec_ && null === e;
                      return c;
                    },
                  },
                  {
                    key: "assignDim",
                    value: function (b) {
                      if (!b instanceof a)
                        throw new Error(
                          "Dimension.assignDim called with an invalid parameter - " +
                            "".concat(d(b), " instead of a Dimension object")
                        );
                      if (null === b.dimVec_) this.dimVec_ = null;
                      else {
                        null === this.dimVec_ && (this.dimVec_ = []);
                        for (var c = 0; c < h.Ucum.dimLen_; c++)
                          this.dimVec_[c] = b.dimVec_[c];
                      }
                      return this;
                    },
                  },
                  {
                    key: "assignZero",
                    value: function () {
                      (null !== this.dimVec_ && void 0 !== this.dimVec_) ||
                        (this.dimVec_ = []);
                      for (var a = 0; a < h.Ucum.dimLen_; a++)
                        this.dimVec_.push(0);
                      return this;
                    },
                  },
                  {
                    key: "isZero",
                    value: function () {
                      var a = null !== this.dimVec_;
                      if (this.dimVec_)
                        for (var b = 0; a && b < h.Ucum.dimLen_; b++)
                          a = 0 === this.dimVec_[b];
                      return a;
                    },
                  },
                  {
                    key: "isNull",
                    value: function () {
                      return null === this.dimVec_;
                    },
                  },
                  {
                    key: "clone",
                    value: function () {
                      var b = new a();
                      return b.assignDim(this), b;
                    },
                  },
                ]),
                a
              );
            })();
          c.Dimension = j;
        },
        { "./config.js": 4, "is-integer": 3 },
      ],
      6: [
        function (a, b, c) {
          "use strict";
          function d(a) {
            return h(a) || g(a) || f(a) || e();
          }
          function e() {
            throw new TypeError(
              "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
            );
          }
          function f(a, b) {
            if (a) {
              if ("string" == typeof a) return i(a, b);
              var c = Object.prototype.toString.call(a).slice(8, -1);
              return (
                "Object" === c && a.constructor && (c = a.constructor.name),
                "Map" === c || "Set" === c
                  ? Array.from(c)
                  : "Arguments" === c ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)
                  ? i(a, b)
                  : void 0
              );
            }
          }
          function g(a) {
            if ("undefined" != typeof Symbol && Symbol.iterator in Object(a))
              return Array.from(a);
          }
          function h(a) {
            if (Array.isArray(a)) return i(a);
          }
          function i(a, b) {
            (null == b || b > a.length) && (b = a.length);
            for (var c = 0, d = new Array(b); c < b; c++) d[c] = a[c];
            return d;
          }
          function j(a) {
            return "[object Object]" === Object.prototype.toString.call(a);
          }
          function k(a) {
            return Object.keys(a).reduce(function (b, c) {
              return (
                j(a[c])
                  ? q.apply(
                      b,
                      k(a[c]).map(function (a) {
                        return [c].concat(d([].concat(a)));
                      })
                    )
                  : b.push(c),
                b
              );
            }, []);
          }
          function l(a) {
            return a.map(function (a) {
              return Array.isArray(a) ? a : [a];
            });
          }
          function m(a, b) {
            if (a.join() !== l(k(b)).join())
              throw new Error("Object of unusual structure");
            return a.map(function (a) {
              var c = b;
              return (
                a.forEach(function (a) {
                  if (void 0 === (c = c[a]))
                    throw new Error("Object of unusual structure");
                }),
                c
              );
            });
          }
          function n(a, b) {
            var c = {};
            return (
              a.forEach(function (a, d) {
                for (var e = c, f = 0; f < a.length - 1; f++)
                  e = e[a[f]] = e[a[f]] || {};
                e[a[a.length - 1]] = b[d];
              }),
              c
            );
          }
          function o(a) {
            if (a && a.length) {
              var b = k(a[0]),
                c = l(b);
              if (b.length) return { config: b, data: a.map(m.bind(null, c)) };
            }
            return { config: [], data: a };
          }
          function p(a) {
            var b = a && a.config;
            if (b) {
              if (b.length && a.data) {
                var c = l(b);
                return a.data.map(n.bind(null, c));
              }
              return a.data;
            }
            return a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.packArray = o),
            (c.unpackArray = p);
          var q = Array.prototype.push;
        },
        {},
      ],
      7: [
        function (a, b, c) {
          "use strict";
          function d(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function e(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function f(a, b, c) {
            return b && e(a.prototype, b), c && e(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.Prefix = void 0);
          var g =
            (a("./config.js"),
            (function () {
              function a(b) {
                if (
                  (d(this, a),
                  void 0 === b.code_ ||
                    null === b.code_ ||
                    void 0 === b.name_ ||
                    null === b.name_ ||
                    void 0 === b.value_ ||
                    null === b.value_ ||
                    void 0 === b.exp_)
                )
                  throw new Error(
                    "Prefix constructor called missing one or more parameters.  Prefix codes (cs or ci), name, value and exponent must all be specified and all but the exponent must not be null."
                  );
                (this.code_ = b.code_),
                  (this.ciCode_ = b.ciCode_),
                  (this.name_ = b.name_),
                  (this.printSymbol_ = b.printSymbol_),
                  "string" == typeof b.value_
                    ? (this.value_ = parseFloat(b.value_))
                    : (this.value_ = b.value_),
                  (this.exp_ = b.exp_);
              }
              return (
                f(a, [
                  {
                    key: "getValue",
                    value: function () {
                      return this.value_;
                    },
                  },
                  {
                    key: "getCode",
                    value: function () {
                      return this.code_;
                    },
                  },
                  {
                    key: "getCiCode",
                    value: function () {
                      return this.ciCode_;
                    },
                  },
                  {
                    key: "getName",
                    value: function () {
                      return this.name_;
                    },
                  },
                  {
                    key: "getPrintSymbol",
                    value: function () {
                      return this.printSymbol_;
                    },
                  },
                  {
                    key: "getExp",
                    value: function () {
                      return this.exp_;
                    },
                  },
                  {
                    key: "equals",
                    value: function (a) {
                      return (
                        this.code_ === a.code_ &&
                        this.ciCode_ === a.ciCode_ &&
                        this.name_ === a.name_ &&
                        this.printSymbol_ === a.printSymbol_ &&
                        this.value_ === a.value_ &&
                        this.exp_ === a.exp_
                      );
                    },
                  },
                ]),
                a
              );
            })());
          c.Prefix = g;
        },
        { "./config.js": 4 },
      ],
      8: [
        function (a, b, c) {
          "use strict";
          function d(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function e(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function f(a, b, c) {
            return b && e(a.prototype, b), c && e(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.PrefixTables = c.PrefixTablesFactory = void 0);
          var g = (function () {
            function a() {
              d(this, a), (this.byCode_ = {}), (this.byValue_ = {});
            }
            return (
              f(a, [
                {
                  key: "prefixCount",
                  value: function () {
                    return Object.keys(this.byCode_).length;
                  },
                },
                {
                  key: "allPrefixesByValue",
                  value: function () {
                    for (
                      var a = "",
                        b = Object.keys(this.byValue_),
                        c = b.length,
                        d = 0;
                      d < c;
                      d++
                    ) {
                      var e = this.getPrefixByValue(b[d]);
                      a += e.code_ + "," + e.name_ + ",," + e.value_ + "\r\n";
                    }
                    return a;
                  },
                },
                {
                  key: "allPrefixesByCode",
                  value: function () {
                    var a = [],
                      b = Object.keys(this.byCode_);
                    b.sort();
                    for (var c = b.length, d = 0; d < c; d++)
                      a.push(this.getPrefixByCode(b[d]));
                    return a;
                  },
                },
                {
                  key: "add",
                  value: function (a) {
                    (this.byCode_[a.getCode()] = a),
                      (this.byValue_[a.getValue()] = a);
                  },
                },
                {
                  key: "isDefined",
                  value: function (a) {
                    return (
                      null !== this.byCode_[a] && void 0 !== this.byCode_[a]
                    );
                  },
                },
                {
                  key: "getPrefixByCode",
                  value: function (a) {
                    return this.byCode_[a];
                  },
                },
                {
                  key: "getPrefixByValue",
                  value: function (a) {
                    return this.byValue_[a];
                  },
                },
              ]),
              a
            );
          })();
          c.PrefixTablesFactory = g;
          var h = new g(),
            i = {
              getInstance: function () {
                return h;
              },
            };
          c.PrefixTables = i;
        },
        {},
      ],
      9: [
        function (a, b, c) {
          "use strict";
          function d(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function e(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function f(a, b, c) {
            return b && e(a.prototype, b), c && e(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.default = void 0);
          var g = (function () {
              function a() {
                d(this, a),
                  (this.funcs = {}),
                  (this.funcs.cel = {
                    cnvTo: function (a) {
                      return a - 273.15;
                    },
                    cnvFrom: function (a) {
                      return a + 273.15;
                    },
                  }),
                  (this.funcs.degf = {
                    cnvTo: function (a) {
                      return a - 459.67;
                    },
                    cnvFrom: function (a) {
                      return a + 459.67;
                    },
                  }),
                  (this.funcs.degre = {
                    cnvTo: function (a) {
                      return a - 273.15;
                    },
                    cnvFrom: function (a) {
                      return a + 273.15;
                    },
                  }),
                  (this.funcs.ph = {
                    cnvTo: function (a) {
                      return -Math.log(a) / Math.LN10;
                    },
                    cnvFrom: function (a) {
                      return Math.pow(10, -a);
                    },
                  }),
                  (this.funcs.ln = {
                    cnvTo: function (a) {
                      return Math.log(a);
                    },
                    cnvFrom: function (a) {
                      return Math.exp(a);
                    },
                  }),
                  (this.funcs["2ln"] = {
                    cnvTo: function (a) {
                      return 2 * Math.log(a);
                    },
                    cnvFrom: function (a) {
                      return Math.exp(a / 2);
                    },
                  }),
                  (this.funcs.lg = {
                    cnvTo: function (a) {
                      return Math.log(a) / Math.LN10;
                    },
                    cnvFrom: function (a) {
                      return Math.pow(10, a);
                    },
                  }),
                  (this.funcs["10lg"] = {
                    cnvTo: function (a) {
                      return (10 * Math.log(a)) / Math.LN10;
                    },
                    cnvFrom: function (a) {
                      return Math.pow(10, a / 10);
                    },
                  }),
                  (this.funcs["20lg"] = {
                    cnvTo: function (a) {
                      return (20 * Math.log(a)) / Math.LN10;
                    },
                    cnvFrom: function (a) {
                      return Math.pow(10, a / 20);
                    },
                  }),
                  (this.funcs["2lg"] = {
                    cnvTo: function (a) {
                      return (2 * Math.log(a)) / Math.LN10;
                    },
                    cnvFrom: function (a) {
                      return Math.pow(10, a / 2);
                    },
                  }),
                  (this.funcs.lgtimes2 = this.funcs["2lg"]),
                  (this.funcs.ld = {
                    cnvTo: function (a) {
                      return Math.log(a) / Math.LN2;
                    },
                    cnvFrom: function (a) {
                      return Math.pow(2, a);
                    },
                  }),
                  (this.funcs["100tan"] = {
                    cnvTo: function (a) {
                      return 100 * Math.tan(a);
                    },
                    cnvFrom: function (a) {
                      return Math.atan(a / 100);
                    },
                  }),
                  (this.funcs.tanTimes100 = this.funcs["100tan"]),
                  (this.funcs.sqrt = {
                    cnvTo: function (a) {
                      return Math.sqrt(a);
                    },
                    cnvFrom: function (a) {
                      return a * a;
                    },
                  }),
                  (this.funcs.inv = {
                    cnvTo: function (a) {
                      return 1 / a;
                    },
                    cnvFrom: function (a) {
                      return 1 / a;
                    },
                  }),
                  (this.funcs.hpX = {
                    cnvTo: function (a) {
                      return -this.funcs.lg(a);
                    },
                    cnvFrom: function (a) {
                      return Math.pow(10, -a);
                    },
                  }),
                  (this.funcs.hpC = {
                    cnvTo: function (a) {
                      return -this.func.ln(a) / this.funcs.ln(100);
                    },
                    cnvFrom: function (a) {
                      return Math.pow(100, -a);
                    },
                  }),
                  (this.funcs.hpM = {
                    cnvTo: function (a) {
                      return -this.funcs.ln(a) / this.funcs.ln(1e3);
                    },
                    cnvFrom: function (a) {
                      return Math.pow(1e3, -a);
                    },
                  }),
                  (this.funcs.hpQ = {
                    cnvTo: function (a) {
                      return -this.funcs.ln(a) / this.funcs.ln(5e4);
                    },
                    cnvFrom: function (a) {
                      return Math.pow(5e4, -a);
                    },
                  });
              }
              return (
                f(a, [
                  {
                    key: "forName",
                    value: function (a) {
                      a = a.toLowerCase();
                      var b = this.funcs[a];
                      if (null === b)
                        throw new Error(
                          "Requested function ".concat(a, " is not defined")
                        );
                      return b;
                    },
                  },
                  {
                    key: "isDefined",
                    value: function (a) {
                      return (a = a.toLowerCase()), null !== this.funcs[a];
                    },
                  },
                ]),
                a
              );
            })(),
            h = new g();
          c.default = h;
        },
        {},
      ],
      10: [
        function (a, b, c) {
          "use strict";
          function d(a) {
            var b = "" + a;
            return !isNaN(b) && !isNaN(parseFloat(b));
          }
          function e(a) {
            return /^\d+$/.test(a);
          }
          function f(a) {
            var b = {},
              c = g.getInstance(),
              d = {};
            if (((d = c.getUnitBySynonym(a)), d.units)) {
              b.status = "succeeded";
              var e = d.units.length;
              b.units = [];
              for (var f = 0; f < e; f++) {
                var h = d.units[f];
                b.units[f] = {
                  code: h.csCode_,
                  name: h.name_,
                  guidance: h.guidance_,
                };
              }
            } else (b.status = d.status), (b.msg = d.msg);
            return b;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.isNumericString = d),
            (c.isIntegerUnit = e),
            (c.getSynonyms = f);
          var g = a("./unitTables.js").UnitTables;
        },
        { "./unitTables.js": 16 },
      ],
      11: [
        function (a, b, c) {
          "use strict";
          function d(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function e(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function f(a, b, c) {
            return b && e(a.prototype, b), c && e(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.ucumJsonDefs = c.UcumJsonDefs = void 0);
          var g = a("./prefix.js"),
            h = a("./prefixTables.js"),
            i = a("./unit.js"),
            j = a("./unitTables.js"),
            k = a("./jsonArrayPack.js").unpackArray,
            l = (function () {
              function b() {
                d(this, b);
              }
              return (
                f(b, [
                  {
                    key: "loadJsonDefs",
                    value: function () {
                      var b = a("../data/ucumDefs.min.json");
                      if (
                        ((b.prefixes = k(b.prefixes)),
                        (b.units = k(b.units)),
                        0 === j.UnitTables.getInstance().unitsCount())
                      ) {
                        for (
                          var c = h.PrefixTables.getInstance(),
                            d = b.prefixes,
                            e = d.length,
                            f = 0;
                          f < e;
                          f++
                        ) {
                          var l = new g.Prefix(d[f]);
                          c.add(l);
                        }
                        for (
                          var m = j.UnitTables.getInstance(),
                            n = b.units,
                            o = n.length,
                            p = 0;
                          p < o;
                          p++
                        ) {
                          var q = new i.Unit(n[p]);
                          m.addUnit(q);
                        }
                      }
                    },
                  },
                ]),
                b
              );
            })();
          c.UcumJsonDefs = l;
          var m = new l();
          c.ucumJsonDefs = m;
        },
        {
          "../data/ucumDefs.min.json": 1,
          "./jsonArrayPack.js": 6,
          "./prefix.js": 7,
          "./prefixTables.js": 8,
          "./unit.js": 14,
          "./unitTables.js": 16,
        },
      ],
      12: [
        function (a, b, c) {
          "use strict";
          function d(a) {
            "@babel/helpers - typeof";
            return (d =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (a) {
                    return typeof a;
                  }
                : function (a) {
                    return a &&
                      "function" == typeof Symbol &&
                      a.constructor === Symbol &&
                      a !== Symbol.prototype
                      ? "symbol"
                      : typeof a;
                  })(a);
          }
          function e() {
            if ("function" != typeof WeakMap) return null;
            var a = new WeakMap();
            return (
              (e = function () {
                return a;
              }),
              a
            );
          }
          function f(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function g(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function h(a, b, c) {
            return b && g(a.prototype, b), c && g(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.UcumLhcUtils = void 0);
          var i = a("./ucumJsonDefs.js"),
            j = (function (a) {
              if (a && a.__esModule) return a;
              if (null === a || ("object" !== d(a) && "function" != typeof a))
                return { default: a };
              var b = e();
              if (b && b.has(a)) return b.get(a);
              var c = {},
                f = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var g in a)
                if (Object.prototype.hasOwnProperty.call(a, g)) {
                  var h = f ? Object.getOwnPropertyDescriptor(a, g) : null;
                  h && (h.get || h.set)
                    ? Object.defineProperty(c, g, h)
                    : (c[g] = a[g]);
                }
              return (c.default = a), b && b.set(a, c), c;
            })(a("./ucumInternalUtils.js")),
            k = a("./config.js").Ucum,
            l = a("./unitTables.js").UnitTables,
            m = a("./unitString.js").UnitString,
            n = (function () {
              function a() {
                f(this, a),
                  0 === l.getInstance().unitsCount() &&
                    i.ucumJsonDefs.loadJsonDefs(),
                  (this.uStrParser_ = m.getInstance());
              }
              return (
                h(a, [
                  {
                    key: "useHTMLInMessages",
                    value: function (a) {
                      void 0 === a && (a = !0),
                        this.uStrParser_.useHTMLInMessages(a);
                    },
                  },
                  {
                    key: "useBraceMsgForEachString",
                    value: function (a) {
                      void 0 === a && (a = !0),
                        this.uStrParser_.useBraceMsgForEachString(a);
                    },
                  },
                  {
                    key: "validateUnitString",
                    value: function (a, b, c) {
                      void 0 === b && (b = !1),
                        void 0 === c && (c = "validate");
                      var d = this.getSpecifiedUnit(a, c, b),
                        e = d.unit,
                        f = {};
                      return (
                        (f = e
                          ? {
                              status: d.origString === a ? "valid" : "invalid",
                              ucumCode: d.origString,
                              unit: {
                                code: e.csCode_,
                                name: e.name_,
                                guidance: e.guidance_,
                              },
                            }
                          : {
                              status:
                                d.origString && null !== d.origString
                                  ? "invalid"
                                  : "error",
                              ucumCode: null,
                            }),
                        d.suggestions && (f.suggestions = d.suggestions),
                        (f.msg = d.retMsg),
                        f
                      );
                    },
                  },
                  {
                    key: "convertUnitTo",
                    value: function (a, b, c, d, e) {
                      void 0 === d && (d = !1), void 0 === e && (e = null);
                      var f = { status: "failed", toVal: null, msg: [] };
                      if (
                        (a && (a = a.trim()),
                        (a && "" != a) ||
                          ((f.status = "error"),
                          f.msg.push('No "from" unit expression specified.')),
                        (null === b ||
                          isNaN(b) ||
                          ("number" != typeof b && !j.isNumericString(b))) &&
                          ((f.status = "error"),
                          f.msg.push(
                            'No "from" value, or an invalid "from" value, was specified.'
                          )),
                        c && (c = c.trim()),
                        (c && "" != c) ||
                          ((f.status = "error"),
                          f.msg.push('No "to" unit expression specified.')),
                        "error" !== f.status)
                      )
                        try {
                          var g = null,
                            h = this.getSpecifiedUnit(a, "convert", d);
                          (g = h.unit),
                            h.retMsg && (f.msg = f.msg.concat(h.retMsg)),
                            h.suggestions &&
                              ((f.suggestions = {}),
                              (f.suggestions.from = h.suggestions)),
                            g ||
                              f.msg.push(
                                "Unable to find a unit for ".concat(a, ", ") +
                                  "so no conversion could be performed."
                              );
                          var i = null;
                          if (
                            ((h = this.getSpecifiedUnit(c, "convert", d)),
                            (i = h.unit),
                            h.retMsg && (f.msg = f.msg.concat(h.retMsg)),
                            h.suggestions &&
                              (f.suggestions || (f.suggestions = {}),
                              (f.suggestions.to = h.suggestions)),
                            i ||
                              f.msg.push(
                                "Unable to find a unit for ".concat(c, ", ") +
                                  "so no conversion could be performed."
                              ),
                            g && i)
                          )
                            try {
                              if (e) {
                                if (0 !== g.moleExp_ && 0 !== i.moleExp_)
                                  throw new Error(
                                    "A molecular weight was specified but a mass <-> mole conversion cannot be executed for two mole-based units.  No conversion was attempted."
                                  );
                                if (0 === g.moleExp_ && 0 === i.moleExp_)
                                  throw new Error(
                                    "A molecular weight was specified but a mass <-> mole conversion cannot be executed when neither unit is mole-based.  No conversion was attempted."
                                  );
                                if (!g.isMoleMassCommensurable(i))
                                  throw new Error(
                                    "Sorry.  ".concat(a, " cannot be ") +
                                      "converted to ".concat(c, ".")
                                  );
                                0 !== g.moleExp_
                                  ? (f.toVal = g.convertMolToMass(b, i, e))
                                  : (f.toVal = g.convertMassToMol(b, i, e));
                              } else f.toVal = i.convertFrom(b, g);
                              (f.status = "succeeded"),
                                (f.fromUnit = g),
                                (f.toUnit = i);
                            } catch (a) {
                              (f.status = "failed"), f.msg.push(a.message);
                            }
                        } catch (a) {
                          a.message == k.needMoleWeightMsg_
                            ? (f.status = "failed")
                            : (f.status = "error"),
                            f.msg.push(a.message);
                        }
                      return f;
                    },
                  },
                  {
                    key: "checkSynonyms",
                    value: function (a) {
                      var b = {};
                      return (
                        void 0 === a || null === a
                          ? ((b.status = "error"),
                            (b.msg = "No term specified for synonym search."))
                          : (b = j.getSynonyms(a)),
                        b
                      );
                    },
                  },
                  {
                    key: "getSpecifiedUnit",
                    value: function (a, b, c) {
                      void 0 === c && (c = !1);
                      var d = {};
                      if (((d.retMsg = []), a)) {
                        var e = l.getInstance();
                        a = a.trim();
                        var f = e.getUnitByCode(a);
                        if (f) (d.unit = f), (d.origString = a);
                        else
                          try {
                            var g = this.uStrParser_.parseString(a, b, c);
                            (d.unit = g[0]),
                              (d.origString = g[1]),
                              g[2] && (d.retMsg = g[2]),
                              (d.suggestions = g[3]);
                          } catch (b) {
                            console.log(
                              "Unit requested for unit string ".concat(a, ".") +
                                "request unsuccessful; error thrown = " +
                                b.message
                            ),
                              d.retMsg.unshift(
                                "".concat(a, " is not a valid unit.  ") +
                                  "".concat(b.message)
                              );
                          }
                      } else d.retMsg.push("No unit string specified.");
                      return d;
                    },
                  },
                  {
                    key: "commensurablesList",
                    value: function (a) {
                      var b = [],
                        c = null,
                        d = this.getSpecifiedUnit(a, "validate", !1),
                        e = d.unit;
                      if ((d.retMsg.length > 0 && (b = d.retMsg), e)) {
                        var f = null,
                          g = e.getProperty("dim_");
                        if (g) {
                          try {
                            f = g.getProperty("dimVec_");
                          } catch (a) {
                            b.push(a.message),
                              "Dimension does not have requested property(dimVec_)" ===
                                a.message && (f = null);
                          }
                          if (f) {
                            c = l.getInstance().getUnitsByDimension(f);
                          }
                        } else
                          b.push("No commensurable units were found for " + a);
                      } else b.push("Could not find unit ".concat(a, "."));
                      return [c, b];
                    },
                  },
                ]),
                a
              );
            })();
          (c.UcumLhcUtils = n),
            (n.getInstance = function () {
              return new n();
            });
        },
        {
          "./config.js": 4,
          "./ucumInternalUtils.js": 10,
          "./ucumJsonDefs.js": 11,
          "./unitString.js": 15,
          "./unitTables.js": 16,
        },
      ],
      13: [
        function (a, b, c) {
          "use strict";
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.UnitTables = c.UcumLhcUtils = c.Ucum = void 0);
          var d = a("./config.js").Ucum;
          c.Ucum = d;
          var e = a("./ucumLhcUtils.js").UcumLhcUtils;
          c.UcumLhcUtils = e;
          var f = a("./unitTables.js").UnitTables;
          c.UnitTables = f;
        },
        { "./config.js": 4, "./ucumLhcUtils.js": 12, "./unitTables.js": 16 },
      ],
      14: [
        function (a, b, c) {
          "use strict";
          function d(a) {
            "@babel/helpers - typeof";
            return (d =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (a) {
                    return typeof a;
                  }
                : function (a) {
                    return a &&
                      "function" == typeof Symbol &&
                      a.constructor === Symbol &&
                      a !== Symbol.prototype
                      ? "symbol"
                      : typeof a;
                  })(a);
          }
          function e() {
            if ("function" != typeof WeakMap) return null;
            var a = new WeakMap();
            return (
              (e = function () {
                return a;
              }),
              a
            );
          }
          function f(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function g(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function h(a, b, c) {
            return b && g(a.prototype, b), c && g(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.Unit = void 0);
          var i,
            j = (function (a) {
              return a && a.__esModule ? a : { default: a };
            })(a("./ucumFunctions.js")),
            k = (function (a) {
              if (a && a.__esModule) return a;
              if (null === a || ("object" !== d(a) && "function" != typeof a))
                return { default: a };
              var b = e();
              if (b && b.has(a)) return b.get(a);
              var c = {},
                f = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var g in a)
                if (Object.prototype.hasOwnProperty.call(a, g)) {
                  var h = f ? Object.getOwnPropertyDescriptor(a, g) : null;
                  h && (h.get || h.set)
                    ? Object.defineProperty(c, g, h)
                    : (c[g] = a[g]);
                }
              return (c.default = a), b && b.set(a, c), c;
            })(a("./ucumInternalUtils.js")),
            l = a("./config.js").Ucum,
            m = a("./dimension.js").Dimension,
            n = a("is-integer"),
            o = (function () {
              function b() {
                var a =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {};
                f(this, b),
                  (this.isBase_ = a.isBase_ || !1),
                  (this.name_ = a.name_ || ""),
                  (this.csCode_ = a.csCode_ || ""),
                  (this.ciCode_ = a.ciCode_ || ""),
                  (this.property_ = a.property_ || ""),
                  (this.magnitude_ = a.magnitude_ || 1),
                  void 0 === a.dim_ || null === a.dim_
                    ? (this.dim_ = new m())
                    : void 0 !== a.dim_.dimVec_
                    ? (this.dim_ = new m(a.dim_.dimVec_))
                    : a.dim_ instanceof m
                    ? (this.dim_ = a.dim_)
                    : a.dim_ instanceof Array || n(a.dim_)
                    ? (this.dim_ = new m(a.dim_))
                    : (this.dim_ = new m()),
                  (this.printSymbol_ = a.printSymbol_ || null),
                  (this.class_ = a.class_ || null),
                  (this.isMetric_ = a.isMetric_ || !1),
                  (this.variable_ = a.variable_ || null),
                  (this.cnv_ = a.cnv_ || null),
                  (this.cnvPfx_ = a.cnvPfx_ || 1),
                  (this.isSpecial_ = a.isSpecial_ || !1),
                  (this.isArbitrary_ = a.isArbitrary_ || !1),
                  (this.moleExp_ = a.moleExp_ || 0),
                  (this.synonyms_ = a.synonyms_ || null),
                  (this.source_ = a.source_ || null),
                  (this.loincProperty_ = a.loincProperty_ || null),
                  (this.category_ = a.category_ || null),
                  (this.guidance_ = a.guidance_ || null),
                  (this.csUnitString_ = a.csUnitString_ || null),
                  (this.ciUnitString_ = a.ciUnitString_ || null),
                  (this.baseFactorStr_ = a.baseFactorStr_ || null),
                  (this.baseFactor_ = a.baseFactor_ || null),
                  (this.defError_ = a.defError_ || !1);
              }
              return (
                h(b, [
                  {
                    key: "assignUnity",
                    value: function () {
                      return (
                        (this.name_ = ""),
                        (this.magnitude_ = 1),
                        this.dim_ || (this.dim_ = new m()),
                        this.dim_.assignZero(),
                        (this.cnv_ = null),
                        (this.cnvPfx_ = 1),
                        this
                      );
                    },
                  },
                  {
                    key: "assignVals",
                    value: function (a) {
                      for (var b in a) {
                        var c = "_" === !b.charAt(b.length - 1) ? b + "_" : b;
                        if (!this.hasOwnProperty(c))
                          throw new Error(
                            "Parameter error; ".concat(
                              b,
                              " is not a property of a Unit"
                            )
                          );
                        this[c] = a[b];
                      }
                    },
                  },
                  {
                    key: "clone",
                    value: function () {
                      var a = this,
                        c = new b();
                      return (
                        Object.getOwnPropertyNames(this).forEach(function (b) {
                          "dim_" === b
                            ? a.dim_
                              ? (c.dim_ = a.dim_.clone())
                              : (c.dim_ = null)
                            : (c[b] = a[b]);
                        }),
                        c
                      );
                    },
                  },
                  {
                    key: "assign",
                    value: function (a) {
                      var b = this;
                      Object.getOwnPropertyNames(a).forEach(function (c) {
                        "dim_" === c
                          ? a.dim_
                            ? (b.dim_ = a.dim_.clone())
                            : (b.dim_ = null)
                          : (b[c] = a[c]);
                      });
                    },
                  },
                  {
                    key: "equals",
                    value: function (a) {
                      return (
                        this.magnitude_ === a.magnitude_ &&
                        this.cnv_ === a.cnv_ &&
                        this.cnvPfx_ === a.cnvPfx_ &&
                        ((null === this.dim_ && null === a.dim_) ||
                          this.dim_.equals(a.dim_))
                      );
                    },
                  },
                  {
                    key: "fullEquals",
                    value: function (a) {
                      for (
                        var b = Object.keys(this).sort(),
                          c = Object.keys(a).sort(),
                          d = b.length,
                          e = d === c.length,
                          f = 0;
                        f < d && e;
                        f++
                      )
                        e =
                          b[f] === c[f] &&
                          ("dim_" === b[f]
                            ? this.dim_.equals(a.dim_)
                            : this[b[f]] === a[b[f]]);
                      return e;
                    },
                  },
                  {
                    key: "getProperty",
                    value: function (a) {
                      return this["_" === a.charAt(a.length - 1) ? a : a + "_"];
                    },
                  },
                  {
                    key: "convertFrom",
                    value: function (a, b) {
                      var c = 0;
                      if (this.isArbitrary_)
                        throw new Error(
                          "Attempt to convert arbitrary unit ".concat(
                            this.name_
                          )
                        );
                      if (b.isArbitrary_)
                        throw new Error(
                          "Attempt to convert to arbitrary unit ".concat(
                            b.name_
                          )
                        );
                      if (b.dim_ && this.dim_ && !b.dim_.equals(this.dim_))
                        throw this.isMoleMassCommensurable(b)
                          ? new Error(l.needMoleWeightMsg_)
                          : new Error(
                              "Sorry.  ".concat(
                                b.csCode_,
                                " cannot be converted "
                              ) + "to ".concat(this.csCode_, ".")
                            );
                      if (b.dim_ && (!this.dim_ || this.dim_.isNull()))
                        throw new Error(
                          "Sorry.  ".concat(
                            b.csCode_,
                            " cannot be converted "
                          ) + "to ".concat(this.csCode_, ".")
                        );
                      if (this.dim_ && (!b.dim_ || b.dim_.isNull()))
                        throw new Error(
                          "Sorry.  ".concat(
                            b.csCode_,
                            " cannot be converted "
                          ) + "to ".concat(this.csCode_, ".")
                        );
                      var d = b.cnv_,
                        e = b.magnitude_;
                      if (d === this.cnv_) c = (a * e) / this.magnitude_;
                      else {
                        var f = 0;
                        if (null != d) {
                          f = j.default.forName(d).cnvFrom(a * b.cnvPfx_) * e;
                        } else f = a * e;
                        if (null != this.cnv_) {
                          c =
                            j.default
                              .forName(this.cnv_)
                              .cnvTo(f / this.magnitude_) / this.cnvPfx_;
                        } else c = f / this.magnitude_;
                      }
                      return c;
                    },
                  },
                  {
                    key: "convertTo",
                    value: function (a, b) {
                      return b.convertFrom(a, this);
                    },
                  },
                  {
                    key: "convertCoherent",
                    value: function (a) {
                      return (
                        null !== this.cnv_ &&
                          (a =
                            this.cnv_.f_from(a / this.cnvPfx_) *
                            this.magnitude_),
                        a
                      );
                    },
                  },
                  {
                    key: "mutateCoherent",
                    value: function (a) {
                      (a = this.convertCoherent(a)),
                        (this.magnitude_ = 1),
                        (this.cnv_ = null),
                        (this.cnvPfx_ = 1),
                        (this.name_ = "");
                      for (var b = 0, c = m.getMax(); b < c; b++) {
                        var d = this.dim_.getElementAt(b),
                          e = this._getUnitTables(),
                          f = e.getUnitsByDimension(new m(b));
                        if (null == f)
                          throw new Error(
                            "Can't find base unit for dimension ".concat(b)
                          );
                        this.name_ = f.name + d;
                      }
                      return a;
                    },
                  },
                  {
                    key: "convertMassToMol",
                    value: function (a, b, c) {
                      var d = (this.magnitude_ * a) / c,
                        e = this._getUnitTables(),
                        f = e.getUnitByCode("mol").magnitude_;
                      return d / (b.magnitude_ / f);
                    },
                  },
                  {
                    key: "convertMolToMass",
                    value: function (a, b, c) {
                      var d = this._getUnitTables(),
                        e = d.getUnitByCode("mol").magnitude_;
                      return ((this.magnitude_ / e) * a * c) / b.magnitude_;
                    },
                  },
                  {
                    key: "mutateRatio",
                    value: function (a) {
                      return null == this.cnv_ ? this.mutateCoherent(a) : a;
                    },
                  },
                  {
                    key: "multiplyThis",
                    value: function (a) {
                      var b = this.clone();
                      null != b.cnv_ ? (b.cnvPfx_ *= a) : (b.magnitude_ *= a);
                      var c = a.toString();
                      return (
                        (b.name_ = this._concatStrs(
                          c,
                          "*",
                          this.name_,
                          "[",
                          "]"
                        )),
                        (b.csCode_ = this._concatStrs(
                          c,
                          ".",
                          this.csCode_,
                          "(",
                          ")"
                        )),
                        (b.ciCode_ = this._concatStrs(
                          c,
                          ".",
                          this.ciCode_,
                          "(",
                          ")"
                        )),
                        (b.printSymbol_ = this._concatStrs(
                          c,
                          ".",
                          this.printSymbol_,
                          "(",
                          ")"
                        )),
                        b
                      );
                    },
                  },
                  {
                    key: "multiplyThese",
                    value: function (a) {
                      var b = this.clone();
                      if (null != b.cnv_) {
                        if (null != a.cnv_ || (a.dim_ && !a.dim_.isZero()))
                          throw new Error(
                            "Attempt to multiply non-ratio unit ".concat(
                              b.name_,
                              " "
                            ) + "failed."
                          );
                        b.cnvPfx_ *= a.magnitude_;
                      } else if (null != a.cnv_) {
                        if (b.dim_ && !b.dim_.isZero())
                          throw new Error(
                            "Attempt to multiply non-ratio unit ".concat(
                              a.name_
                            )
                          );
                        (b.cnvPfx_ = a.cnvPfx_ * b.magnitude_),
                          (b.cnv_ = a.cnv_);
                      } else b.magnitude_ *= a.magnitude_;
                      return (
                        !b.dim_ || (b.dim_ && !b.dim_.dimVec_)
                          ? a.dim_
                            ? (b.dim_ = a.dim_.clone())
                            : (b.dim_ = a.dim_)
                          : a.dim_ && a.dim_ instanceof m && b.dim_.add(a.dim_),
                        (b.name_ = this._concatStrs(
                          b.name_,
                          "*",
                          a.name_,
                          "[",
                          "]"
                        )),
                        (b.csCode_ = this._concatStrs(
                          b.csCode_,
                          ".",
                          a.csCode_,
                          "(",
                          ")"
                        )),
                        b.ciCode_ && a.ciCode_
                          ? (b.ciCode_ = this._concatStrs(
                              b.ciCode_,
                              ".",
                              a.ciCode_,
                              "(",
                              ")"
                            ))
                          : a.ciCode_ && (b.ciCode_ = a.ciCode_),
                        (b.guidance_ = ""),
                        b.printSymbol_ && a.printSymbol_
                          ? (b.printSymbol_ = this._concatStrs(
                              b.printSymbol_,
                              ".",
                              a.printSymbol_,
                              "(",
                              ")"
                            ))
                          : a.printSymbol_ && (b.printSymbol_ = a.printSymbol_),
                        (b.moleExp_ = b.moleExp_ + a.moleExp_),
                        b.isArbitrary_ || (b.isArbitrary_ = a.isArbitrary_),
                        b
                      );
                    },
                  },
                  {
                    key: "divide",
                    value: function (a) {
                      var b = this.clone();
                      if (null != b.cnv_)
                        throw new Error(
                          "Attempt to divide non-ratio unit ".concat(b.name_)
                        );
                      if (null != a.cnv_)
                        throw new Error(
                          "Attempt to divide by non-ratio unit ".concat(a.name_)
                        );
                      return (
                        b.name_ && a.name_
                          ? (b.name_ = this._concatStrs(
                              b.name_,
                              "/",
                              a.name_,
                              "[",
                              "]"
                            ))
                          : a.name_ && (b.name_ = a.invertString(a.name_)),
                        (b.csCode_ = this._concatStrs(
                          b.csCode_,
                          "/",
                          a.csCode_,
                          "(",
                          ")"
                        )),
                        b.ciCode_ && a.ciCode_
                          ? (b.ciCode_ = this._concatStrs(
                              b.ciCode_,
                              "/",
                              a.ciCode_,
                              "(",
                              ")"
                            ))
                          : a.ciCode_ &&
                            (b.ciCode_ = a.invertString(a.ciCode_)),
                        (b.guidance_ = ""),
                        (b.magnitude_ /= a.magnitude_),
                        b.printSymbol_ && a.printSymbol_
                          ? (b.printSymbol_ = this._concatStrs(
                              b.printSymbol_,
                              "/",
                              a.printSymbol_,
                              "(",
                              ")"
                            ))
                          : a.printSymbol_ &&
                            (b.printSymbol_ = a.invertString(a.printSymbol_)),
                        a.dim_ &&
                          (b.dim_
                            ? (b.dim_.isNull() && b.dim_.assignZero(),
                              (b.dim_ = b.dim_.sub(a.dim_)))
                            : (b.dim_ = a.dim_.clone().minus())),
                        (b.moleExp_ = b.moleExp_ - a.moleExp_),
                        b.isArbitrary_ || (b.isArbitrary_ = a.isArbitrary_),
                        b
                      );
                    },
                  },
                  {
                    key: "invert",
                    value: function () {
                      if (null != this.cnv_)
                        throw new Error(
                          "Attempt to invert a non-ratio unit - ".concat(
                            this.name_
                          )
                        );
                      return (
                        (this.name_ = this.invertString(this.name_)),
                        (this.magnitude_ = 1 / this.magnitude_),
                        this.dim_.minus(),
                        this
                      );
                    },
                  },
                  {
                    key: "invertString",
                    value: function (a) {
                      if (a.length > 0) {
                        var b = a
                          .replace("/", "!")
                          .replace(".", "/")
                          .replace("!", ".");
                        switch (b.charAt(0)) {
                          case ".":
                            a = b.substr(1);
                            break;
                          case "/":
                            a = b;
                            break;
                          default:
                            a = "/" + b;
                        }
                      }
                      return a;
                    },
                  },
                  {
                    key: "_concatStrs",
                    value: function (a, b, c, d, e) {
                      return (
                        this._buildOneString(a, d, e) +
                        b +
                        this._buildOneString(c, d, e)
                      );
                    },
                  },
                  {
                    key: "_buildOneString",
                    value: function (a, b, c) {
                      return k.isNumericString(a)
                        ? a
                        : "(" === a.charAt(0) || "[" === a.charAt(0)
                        ? a
                        : /[.\/* ]/.test(a)
                        ? b + a + c
                        : a;
                    },
                  },
                  {
                    key: "power",
                    value: function (a) {
                      if (null != this.cnv_)
                        throw new Error(
                          "Attempt to raise a non-ratio unit, ".concat(
                            this.name_,
                            ", "
                          ) + "to a power."
                        );
                      for (
                        var b = this.csCode_,
                          c = b.match(/([.\/]|[^.\/]+)/g),
                          d = c.length,
                          e = 0;
                        e < d;
                        e++
                      ) {
                        var f = c[e];
                        if ("/" !== f && "." !== f) {
                          var g = parseInt(f);
                          if (n(g)) c[e] = Math.pow(g, a).toString();
                          else
                            for (var h = f.length, i = h - 1; i >= 0; i--) {
                              var j = parseInt(f[i]);
                              if (!n(j)) {
                                if (
                                  (("-" !== f[i] && "+" !== f[i]) || i--,
                                  i < h - 1)
                                ) {
                                  var k = parseInt(f.substr(i));
                                  (k = Math.pow(k, a)),
                                    (c[e] = f.substr(0, i) + k.toString()),
                                    (i = -1);
                                } else (c[e] += a.toString()), (i = -1);
                                i = -1;
                              }
                            }
                        }
                      }
                      return (
                        (this.csCode_ = c.join("")),
                        (this.magnitude_ = Math.pow(this.magnitude_, a)),
                        this.dim_ && this.dim_.mul(a),
                        this
                      );
                    },
                  },
                  {
                    key: "isMoleMassCommensurable",
                    value: function (a) {
                      var b = this._getUnitTables(),
                        c = b.getMassDimensionIndex(),
                        d = !1;
                      if (1 === this.moleExp_ && 0 === a.moleExp_) {
                        var e = this.dim_.clone(),
                          f = e.getElementAt(c);
                        e.setElementAt(c, f + this.moleExp_),
                          (d = e.equals(a.dim_));
                      } else if (1 === a.moleExp_ && 0 === this.moleExp_) {
                        var g = a.dim_.clone(),
                          h = g.getElementAt(c);
                        g.setElementAt(c, h + a.moleExp_),
                          (d = g.equals(this.dim_));
                      }
                      return d;
                    },
                  },
                  {
                    key: "_getUnitTables",
                    value: function () {
                      return (
                        i || (i = a("./unitTables.js").UnitTables),
                        i.getInstance()
                      );
                    },
                  },
                ]),
                b
              );
            })();
          c.Unit = o;
        },
        {
          "./config.js": 4,
          "./dimension.js": 5,
          "./ucumFunctions.js": 9,
          "./ucumInternalUtils.js": 10,
          "./unitTables.js": 16,
          "is-integer": 3,
        },
      ],
      15: [
        function (a, b, c) {
          "use strict";
          function d(a) {
            "@babel/helpers - typeof";
            return (d =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (a) {
                    return typeof a;
                  }
                : function (a) {
                    return a &&
                      "function" == typeof Symbol &&
                      a.constructor === Symbol &&
                      a !== Symbol.prototype
                      ? "symbol"
                      : typeof a;
                  })(a);
          }
          function e() {
            if ("function" != typeof WeakMap) return null;
            var a = new WeakMap();
            return (
              (e = function () {
                return a;
              }),
              a
            );
          }
          function f() {
            var a = g(["", " is invalid.\n"], ["", " is invalid.\\n"]);
            return (
              (f = function () {
                return a;
              }),
              a
            );
          }
          function g(a, b) {
            return (
              b || (b = a.slice(0)),
              Object.freeze(
                Object.defineProperties(a, { raw: { value: Object.freeze(b) } })
              )
            );
          }
          function h(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function i(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function j(a, b, c) {
            return b && i(a.prototype, b), c && i(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.UnitString = void 0);
          var k = (function (a) {
              if (a && a.__esModule) return a;
              if (null === a || ("object" !== d(a) && "function" != typeof a))
                return { default: a };
              var b = e();
              if (b && b.has(a)) return b.get(a);
              var c = {},
                f = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var g in a)
                if (Object.prototype.hasOwnProperty.call(a, g)) {
                  var h = f ? Object.getOwnPropertyDescriptor(a, g) : null;
                  h && (h.get || h.set)
                    ? Object.defineProperty(c, g, h)
                    : (c[g] = a[g]);
                }
              return (c.default = a), b && b.set(a, c), c;
            })(a("./ucumInternalUtils.js")),
            l = a("./config.js").Ucum,
            m = a("./unit.js").Unit,
            n = a("./unitTables.js").UnitTables,
            o = a("./prefixTables.js").PrefixTables,
            p = (function () {
              function a() {
                h(this, a),
                  (this.utabs_ = n.getInstance()),
                  (this.pfxTabs_ = o.getInstance()),
                  (this.openEmph_ = l.openEmph_),
                  (this.closeEmph_ = l.closeEmph_),
                  (this.bracesMsg_ = ""),
                  (this.parensFlag_ = "parens_placeholder"),
                  (this.pFlagLen_ = this.parensFlag_.length),
                  (this.braceFlag_ = "braces_placeholder"),
                  (this.bFlagLen_ = this.braceFlag_.length),
                  (this.vcMsgStart_ = null),
                  (this.vcMsgEnd_ = null),
                  (this.retMsg_ = []),
                  (this.parensUnits_ = []),
                  (this.annotations_ = []),
                  (this.suggestions = []);
              }
              return (
                j(a, [
                  {
                    key: "useHTMLInMessages",
                    value: function (a) {
                      void 0 === a || a
                        ? ((this.openEmph_ = l.openEmphHTML_),
                          (this.closeEmph_ = l.closeEmphHTML_))
                        : ((this.openEmph_ = l.openEmph_),
                          (this.closeEmph_ = l.closeEmph_));
                    },
                  },
                  {
                    key: "useBraceMsgForEachString",
                    value: function (a) {
                      this.bracesMsg_ = void 0 === a || a ? l.bracesMsg_ : "";
                    },
                  },
                  {
                    key: "parseString",
                    value: function (a, b, c) {
                      if ("" === (a = a.trim()) || null === a)
                        throw new Error(
                          "Please specify a unit expression to be validated."
                        );
                      "validate" === b
                        ? ((this.vcMsgStart_ = l.valMsgStart_),
                          (this.vcMsgEnd_ = l.valMsgEnd_))
                        : ((this.vcMsgStart_ = l.cnvMsgStart_),
                          (this.vcMsgEnd_ = l.cnvMsgEnd_)),
                        (this.suggestions_ =
                          void 0 === c || !1 === c ? null : []),
                        (this.retMsg_ = []),
                        (this.parensUnits_ = []),
                        (this.annotations_ = []);
                      var d = a,
                        e = [];
                      if (
                        ((a = this._getAnnotations(a)), this.retMsg_.length > 0)
                      )
                        (e[0] = null), (e[1] = null);
                      else {
                        var f = (this.retMsg_.length, null);
                        for (f in l.specUnits_)
                          for (; -1 !== a.indexOf(f); )
                            a = a.replace(f, l.specUnits_[f]);
                        if (a.indexOf(" ") > -1)
                          throw new Error(
                            "Blank spaces are not allowed in unit expressions."
                          );
                        e = this._parseTheString(a, d);
                        var g = e[0];
                        (k.isIntegerUnit(g) || "number" == typeof g) &&
                          ((g = new m({ csCode_: d, magnitude_: g, name_: d })),
                          (e[0] = g));
                      }
                      return (
                        (e[2] = this.retMsg_),
                        this.suggestions_ &&
                          this.suggestions_.length > 0 &&
                          (e[3] = this.suggestions_),
                        e
                      );
                    },
                  },
                  {
                    key: "_parseTheString",
                    value: function (a, b) {
                      var c = null,
                        d = this.retMsg_.length > 0,
                        e = this._processParens(a, b);
                      d = e[2];
                      var f = [];
                      if (!d) {
                        (a = e[0]), (b = e[1]);
                        var g = this._makeUnitsArray(a, b);
                        if (!(d = g[2])) {
                          (f = g[0]), (b = g[1]);
                          for (var h = f.length, i = 0; i < h; i++) {
                            var j = f[i].un;
                            if (k.isIntegerUnit(j)) f[i].un = Number(j);
                            else if (j.indexOf(this.parensFlag_) >= 0) {
                              var l = this._getParensUnit(j, b);
                              d || (d = l[1]), d || (f[i].un = l[0]);
                            } else {
                              var m = this._makeUnit(j, b);
                              null === m[0]
                                ? (d = !0)
                                : ((f[i].un = m[0]), (b = m[1]));
                            }
                          }
                        }
                      }
                      return (
                        d ||
                          (null !== f[0] &&
                            " " !== f[0] &&
                            void 0 !== f[0].un &&
                            null !== f[0].un) ||
                          0 !== this.retMsg_.length ||
                          (this.retMsg_.push(
                            "Unit string (".concat(b, ") did not contain ") +
                              "anything that could be used to create a unit, or else something that is not handled yet by this package.  Sorry"
                          ),
                          (d = !0)),
                        d || (c = this._performUnitArithmetic(f, b)),
                        [c, b]
                      );
                    },
                  },
                  {
                    key: "_getAnnotations",
                    value: function (a) {
                      for (var b = a.indexOf("{"); b >= 0; ) {
                        var c = a.indexOf("}");
                        if (c < 0)
                          this.retMsg_.push(
                            "Missing closing brace for annotation starting at " +
                              this.openEmph_ +
                              a.substr(b) +
                              this.closeEmph_
                          ),
                            (b = -1);
                        else {
                          var d = a.substring(b, c + 1),
                            e = this.annotations_.length.toString();
                          (a = a.replace(
                            d,
                            this.braceFlag_ + e + this.braceFlag_
                          )),
                            this.annotations_.push(d),
                            (b = a.indexOf("{"));
                        }
                      }
                      var f = a.indexOf("}");
                      return (
                        f >= 0 &&
                          this.retMsg_.push(
                            "Missing opening brace for closing brace found at " +
                              this.openEmph_ +
                              a.substring(0, f + 1) +
                              this.closeEmph_
                          ),
                        a
                      );
                    },
                  },
                  {
                    key: "_processParens",
                    value: function (a, b) {
                      for (
                        var c = [],
                          d = 0,
                          e = !1,
                          f = this.parensUnits_.length,
                          g = 0;
                        "" !== a && !e;

                      ) {
                        var h = 0,
                          i = 0,
                          j = a.indexOf("(");
                        if (j < 0) {
                          var k = a.indexOf(")");
                          if (k >= 0) {
                            var l =
                              "Missing open parenthesis for close " +
                              "parenthesis at ".concat(a.substring(0, k + g)) +
                              ""
                                .concat(this.openEmph_)
                                .concat(a.substr(k, 1))
                                .concat(this.closeEmph_);
                            k < a.length - 1 &&
                              (l += "".concat(a.substr(k + 1))),
                              this.retMsg_.push(l),
                              (c[d] = a),
                              (e = !0);
                          } else (c[d] = a), (a = "");
                        } else {
                          h += 1;
                          var m = a.length;
                          j > 0 && (c[d++] = a.substr(0, j));
                          for (var n = 0, o = j + 1; o < m && h != i; o++)
                            "(" === a[o] ? (h += 1) : ")" === a[o] && (i += 1);
                          if (h === i) {
                            (n = o),
                              (c[d++] =
                                this.parensFlag_ +
                                f.toString() +
                                this.parensFlag_);
                            var p = this._parseTheString(
                              a.substring(j + 1, n - 1),
                              b
                            );
                            null === p[0]
                              ? (e = !0)
                              : ((b = p[1]),
                                (this.parensUnits_[f++] = p[0]),
                                (a = a.substr(n)),
                                (g = n));
                          } else
                            c.push(b.substr(j)),
                              this.retMsg_.push(
                                "Missing close parenthesis for open parenthesis at " +
                                  "".concat(b.substring(0, j + g)) +
                                  ""
                                    .concat(this.openEmph_)
                                    .concat(b.substr(j, 1)) +
                                  ""
                                    .concat(this.closeEmph_)
                                    .concat(b.substr(j + 1))
                              ),
                              (e = !0);
                        }
                      }
                      return e && (this.parensUnits_ = []), [c.join(""), b, e];
                    },
                  },
                  {
                    key: "_makeUnitsArray",
                    value: function (a, b) {
                      var c = a.match(/([.\/]|[^.\/]+)/g),
                        d = !1,
                        e = [],
                        f = /(^[0-9]+)(\[?[a-zA-Z\_0-9a-zA-Z\_]+\]?$)/;
                      if (
                        ("/" === c[0]
                          ? c.unshift("1")
                          : "." === c[0] &&
                            (this.retMsg_.push(
                              "".concat(b, " is not a valid UCUM code. ") +
                                "The multiplication operator at the beginning of the expression is not valid. A multiplication operator must appear only between two codes."
                            ),
                            (d = !0)),
                        !d)
                      ) {
                        if (!k.isNumericString(c[0])) {
                          var g = c[0].match(f);
                          if (
                            g &&
                            3 === g.length &&
                            "" !== g[1] &&
                            "" !== g[2] &&
                            0 !== g[2].indexOf(this.braceFlag_)
                          ) {
                            var h = g[2];
                            if (!d && -1 !== g[2].indexOf(this.parensFlag_)) {
                              var i = this._getParensUnit(g[2], b);
                              (g[2] = i[0].csCode_),
                                (h = "(".concat(g[2], ")")),
                                (d = i[1]);
                            }
                            d ||
                              (this.retMsg_.push(
                                ""
                                  .concat(g[1])
                                  .concat(h, " is not a valid UCUM code.") +
                                  "  "
                                    .concat(this.vcMsgStart_)
                                    .concat(g[1], ".")
                                    .concat(h)
                                    .concat(this.vcMsgEnd_)
                              ),
                              (b = b.replace(
                                "".concat(g[1]).concat(h),
                                "".concat(g[1], ".").concat(h)
                              )),
                              (c[0] = g[2]),
                              c.unshift(g[1], "."));
                          }
                        }
                        if (!d) {
                          var j = c.length;
                          e = [{ op: "", un: c[0] }];
                          for (var m = 1; m < j; m++) {
                            var n = c[m++];
                            if (c[m])
                              if (-1 !== l.validOps_.indexOf(c[m]))
                                this.retMsg_.push(
                                  "".concat(b, " is not a valid UCUM code. ") +
                                    "A unit code is missing between".concat(
                                      this.openEmph_
                                    ) +
                                    ""
                                      .concat(n)
                                      .concat(this.closeEmph_, "and")
                                      .concat(this.openEmph_) +
                                    ""
                                      .concat(c[m])
                                      .concat(this.closeEmph_, "in")
                                      .concat(this.openEmph_) +
                                    ""
                                      .concat(n)
                                      .concat(c[m])
                                      .concat(this.closeEmph_, ".")
                                ),
                                  (m = j),
                                  (d = !0);
                              else if (k.isNumericString(c[m]))
                                e.push({ op: n, un: c[m] });
                              else {
                                var o = c[m].match(f);
                                if (
                                  o &&
                                  3 === o.length &&
                                  "" !== o[1] &&
                                  "" !== o[2] &&
                                  0 !== o[2].indexOf(this.braceFlag_)
                                ) {
                                  var p = o[0];
                                  if (
                                    d ||
                                    -1 === o[2].indexOf(this.parensFlag_)
                                  ) {
                                    var q = "(" + o[1] + "." + o[2] + ")",
                                      r = this._processParens(q, b);
                                    r[2]
                                      ? ((m = j), (d = !0))
                                      : (this.retMsg_.push(
                                          "".concat(o[0], " is not a ") +
                                            "valid UCUM code.  "
                                              .concat(this.vcMsgStart_)
                                              .concat(o[1], ".")
                                              .concat(o[2]) +
                                            "".concat(this.vcMsgEnd_)
                                        ),
                                        (b = b.replace(o[0], q)),
                                        e.push({ op: n, un: r[0] }));
                                  } else {
                                    var s = this._getParensUnit(o[2], b);
                                    if (
                                      ((o[2] = s[0].csCode_),
                                      (p = "(".concat(o[2], ")")),
                                      !(d = s[1]))
                                    ) {
                                      this.retMsg_.push(
                                        ""
                                          .concat(o[1])
                                          .concat(p, " is not a ") +
                                          "valid UCUM code.  "
                                            .concat(this.vcMsgStart_)
                                            .concat(o[1], ".")
                                            .concat(p) +
                                          "".concat(this.vcMsgEnd_)
                                      );
                                      var t = "("
                                        .concat(o[1], ".")
                                        .concat(p, ")");
                                      b = b.replace(
                                        "".concat(o[1]).concat(p),
                                        t
                                      );
                                      var u = this._processParens(t, b);
                                      (d = u[2]),
                                        d || e.push({ op: n, un: u[0] });
                                    }
                                  }
                                } else e.push({ op: n, un: c[m] });
                              }
                            else
                              this.retMsg_.push(
                                "".concat(b, " is not a valid UCUM code. ") +
                                  "It is terminated with the operator ".concat(
                                    this.openEmph_
                                  ) +
                                  "".concat(n).concat(this.closeEmph_, ".")
                              ),
                                (m = j),
                                (d = !0);
                          }
                        }
                      }
                      return [e, b, d];
                    },
                  },
                  {
                    key: "_getParensUnit",
                    value: function (a, b) {
                      var c = !1,
                        d = null,
                        e = a.indexOf(this.parensFlag_),
                        f = null;
                      e > 0 && (f = a.substr(0, e - 1));
                      var g = a.lastIndexOf(this.parensFlag_),
                        h = null;
                      g + this.pFlagLen_ < a.length &&
                        (h = a.substr(g + this.pFlagLen_));
                      var i = a.substring(e + this.pFlagLen_, g);
                      if (!k.isNumericString(i))
                        throw new Error(
                          "Processing error - invalid parens number ".concat(
                            i,
                            " "
                          ) + "found in ".concat(a, ".")
                        );
                      if (
                        ((d = this.parensUnits_[Number(i)]),
                        (a = k.isIntegerUnit(d) ? d : d.csCode_),
                        f)
                      )
                        if (k.isNumericString(f)) {
                          var j = d.getProperty("magnitude_");
                          (j *= Number(f)),
                            d.assignVals({ magnitude_: j }),
                            (a = "".concat(f, ".").concat(a)),
                            this.retMsg_.push(
                              ""
                                .concat(f)
                                .concat(a, " is not a valid UCUM code.\n") +
                                this.vcMsgStart_ +
                                a +
                                this.vcMsgEnd_
                            );
                        } else if (f.indexOf(this.braceFlag_) >= 0) {
                          var l = this._getAnnoText(f, b);
                          if (l[1] || l[2])
                            throw new Error(
                              "Text found before the parentheses (" +
                                "".concat(
                                  f,
                                  ") included an annotation along with other text "
                                ) +
                                "for parenthetical unit ".concat(d.csCode_)
                            );
                          (a += l[0]),
                            this.retMsg_.push(
                              "The annotation ".concat(
                                l[0],
                                " before the unit "
                              ) +
                                "code is invalid.\n" +
                                this.vcMsgStart_ +
                                a +
                                this.vcMsgEnd_
                            );
                        } else if (this.suggestions_) {
                          var n = this._getSuggestions(f);
                          c = "succeeded" !== n;
                        } else
                          this.retMsg_.push(
                            ""
                              .concat(f, " preceding the unit code ")
                              .concat(a, " ") +
                              "is invalid.  Unable to make a substitution."
                          ),
                            (c = !0);
                      if (h)
                        if (h.indexOf(this.braceFlag_) >= 0) {
                          var o = this._getAnnoText(h, b);
                          if (o[1] || o[2])
                            throw new Error(
                              "Text found after the parentheses (" +
                                "".concat(
                                  h,
                                  ") included an annotation along with other text "
                                ) +
                                "for parenthetical unit ".concat(d.csCode_)
                            );
                          a += o[0];
                        } else if (k.isNumericString(h))
                          (a += h),
                            (d = d.power(Number(h))),
                            this.retMsg_.push(
                              "An exponent (".concat(
                                h,
                                ") following a parenthesis "
                              ) +
                                "is invalid as of revision 1.9 of the UCUM Specification.\n  " +
                                this.vcMsgStart_ +
                                a +
                                this.vcMsgEnd_
                            );
                        else if (this.suggestions_) {
                          var p = this._getSuggestions(f);
                          c = "succeeded" !== p;
                        } else
                          this.retMsg_.push(
                            "Text "
                              .concat(h, " following the unit code ")
                              .concat(a, " ") +
                              "is invalid.  Unable to make a substitution."
                          ),
                            (c = !0);
                      return (
                        c ||
                          (d
                            ? k.isIntegerUnit(d)
                              ? (d = new m({
                                  csCode_: d,
                                  magnitude_: d,
                                  name_: d,
                                }))
                              : (d.csCode_ = a)
                            : (d = new m({
                                csCode_: a,
                                magnitude_: 1,
                                name_: a,
                              }))),
                        [d, c]
                      );
                    },
                  },
                  {
                    key: "_getAnnoText",
                    value: function (a, b) {
                      var c = a.indexOf(this.braceFlag_),
                        d = c > 0 ? a.substring(0, c) : null;
                      0 !== c && (a = a.substr(c));
                      var e = a.indexOf(this.braceFlag_, 1),
                        f =
                          e + this.bFlagLen_ < a.length
                            ? a.substr(e + this.bFlagLen_)
                            : null,
                        g = a.substring(this.bFlagLen_, e),
                        h = Number(g);
                      if (
                        !k.isNumericString(g) ||
                        h >= this.annotations_.length
                      )
                        throw new Error(
                          "Processing Error - invalid annotation index ".concat(
                            g,
                            " found "
                          ) +
                            "in ".concat(a, " that was created from ").concat(b)
                        );
                      return (a = this.annotations_[h]), [a, d, f];
                    },
                  },
                  {
                    key: "_getSuggestions",
                    value: function (a) {
                      var b = k.getSynonyms(a);
                      if ("succeeded" === b.status) {
                        var c = {};
                        (c.msg =
                          "".concat(
                            a,
                            " is not a valid UCUM code.  We found possible "
                          ) + "units that might be what was meant:"),
                          (c.invalidUnit = a);
                        var d = b.units.length;
                        c.units = [];
                        for (var e = 0; e < d; e++) {
                          var f = b.units[e],
                            g = [f.code, f.name, f.guidance];
                          c.units.push(g);
                        }
                        this.suggestions_.push(c);
                      } else
                        this.retMsg_.push(
                          "".concat(
                            a,
                            " is not a valid UCUM code.  No alternatives "
                          ) + "were found."
                        );
                      return b.status;
                    },
                  },
                  {
                    key: "_makeUnit",
                    value: function (a, b) {
                      var c = this.utabs_.getUnitByCode(a);
                      if (c) c = c.clone();
                      else if (a.indexOf(this.braceFlag_) >= 0) {
                        var d = this._getUnitWithAnnotation(a, b);
                        (c = d[0]), c && (b = d[1]);
                      } else {
                        if (a.indexOf("^") > -1) {
                          var e = a.replace("^", "*");
                          (c = this.utabs_.getUnitByCode(e)),
                            c &&
                              ((c = c.clone()),
                              (c.csCode_ = c.csCode_.replace("*", "^")),
                              (c.ciCode_ = c.ciCode_.replace("*", "^")));
                        }
                        if (!c) {
                          var f = "[" + a + "]";
                          (c = this.utabs_.getUnitByCode(f)),
                            c &&
                              ((c = c.clone()),
                              (b = b.replace(a, f)),
                              this.retMsg_.push(
                                "".concat(
                                  a,
                                  " is not a valid unit expression, but "
                                ) +
                                  "".concat(f, " is.\n") +
                                  this.vcMsgStart_ +
                                  ""
                                    .concat(f, " (")
                                    .concat(c.name_, ")")
                                    .concat(this.vcMsgEnd_)
                              ));
                        }
                        if (!c) {
                          var g = this.utabs_.getUnitByName(a);
                          if (g && g.length > 0) {
                            c = g[0].clone();
                            for (
                              var h =
                                  "The UCUM code for " +
                                  a +
                                  " is " +
                                  c.csCode_ +
                                  ".\n" +
                                  this.vcMsgStart_ +
                                  c.csCode_ +
                                  this.vcMsgEnd_,
                                i = !1,
                                j = 0;
                              j < this.retMsg_.length && !i;
                              j++
                            )
                              i = this.retMsg_[j] === h;
                            i || this.retMsg_.push(h);
                            var k = new RegExp(
                                "(^|[./({])(" + a + ")($|[./)}])"
                              ),
                              m = b.match(k);
                            (b = b.replace(k, m[1] + c.csCode_ + m[3])),
                              (a = c.csCode_);
                          }
                        }
                        if (!c) {
                          var n = null;
                          for (n in l.specUnits_)
                            -1 !== a.indexOf(l.specUnits_[n]) &&
                              (a = a.replace(l.specUnits_[n], n));
                          (c = this.utabs_.getUnitByCode(a)),
                            c && (c = c.clone());
                        }
                        if (!c) {
                          var o = a,
                            p = null,
                            q = null,
                            r = null,
                            s = null,
                            t = null,
                            u = null,
                            v = this._isCodeWithExponent(a);
                          if (
                            (v &&
                              ((a = v[0]),
                              (q = v[1]),
                              (p = this.utabs_.getUnitByCode(a))),
                            !p &&
                              ((r = a.charAt(0)),
                              (s = this.pfxTabs_.getPrefixByCode(r))))
                          ) {
                            (t = s.getValue()), (u = s.getExp());
                            var w = r.length;
                            (a = a.substr(w)),
                              (p = this.utabs_.getUnitByCode(a)),
                              p ||
                                "d" != r ||
                                "a" != a.substr(0, 1) ||
                                ((r = "da"),
                                (s = this.pfxTabs_.getPrefixByCode(r)),
                                (t = s.getValue()),
                                (a = a.substr(1)),
                                (p = this.utabs_.getUnitByCode(a)));
                          }
                          if (p) {
                            (c = p.clone()), (c.guidance_ = "");
                            var x = c.getProperty("dim_"),
                              y = c.getProperty("magnitude_"),
                              z = c.getProperty("name_"),
                              A = c.getProperty("ciCode_"),
                              B = c.getProperty("printSymbol_");
                            if (q) {
                              q = parseInt(q);
                              var C = q;
                              x && (x = x.mul(q)),
                                (y = Math.pow(y, q)),
                                c.assignVals({ magnitude_: y }),
                                s &&
                                  u &&
                                  ((C *= s.getExp()), (t = Math.pow(10, C)));
                            }
                            s &&
                              (c.cnv_
                                ? c.assignVals({ cnvPfx_: t })
                                : ((y *= t), c.assignVals({ magnitude_: y })));
                            var D = c.csCode_;
                            if (
                              (s &&
                                ((z = s.getName() + z),
                                (D = r + D),
                                (A = s.getCiCode() + A),
                                (B = s.getPrintSymbol() + B),
                                c.assignVals({
                                  name_: z,
                                  csCode_: D,
                                  ciCode_: A,
                                  printSymbol_: B,
                                })),
                              q)
                            ) {
                              var E = q.toString();
                              c.assignVals({
                                name_: z + "<sup>" + E + "</sup>",
                                csCode_: D + E,
                                ciCode_: A + E,
                                printSymbol_: B + "<sup>" + E + "</sup>",
                              });
                            }
                          } else if (((c = null), this.suggestions_)) {
                            this._getSuggestions(o);
                          } else
                            this.retMsg_.push(
                              "".concat(o, " is not a valid UCUM code.")
                            );
                        }
                      }
                      return [c, b];
                    },
                  },
                  {
                    key: "_getUnitWithAnnotation",
                    value: function (a, b) {
                      var c = null,
                        d = this._getAnnoText(a, b),
                        e = d[0],
                        g = d[1],
                        h = d[2];
                      this.bracesMsg_ &&
                        -1 === this.retMsg_.indexOf(this.bracesMsg_) &&
                        this.retMsg_.push(this.bracesMsg_);
                      var i = this.retMsg_.length;
                      if (g || h)
                        if (g && !h)
                          if (k.isIntegerUnit(g)) c = g;
                          else {
                            var j = this._makeUnit(g, b);
                            j[0]
                              ? ((c = j[0]), (c.csCode_ += e), (b = j[1]))
                              : this.retMsg_.push(
                                  "Unable to find a unit for ".concat(
                                    g,
                                    " that "
                                  ) + "precedes the annotation ".concat(e, ".")
                                );
                          }
                        else if (!g && h)
                          if (k.isIntegerUnit(h))
                            (c = h + e),
                              this.retMsg_.push(
                                "The annotation ".concat(e, " before the ")(
                                  f(),
                                  h
                                ) +
                                  this.vcMsgStart_ +
                                  c +
                                  this.vcMsgEnd_
                              );
                          else {
                            var l = this._makeUnit(h, b);
                            l[0]
                              ? ((c = l[0]),
                                (c.csCode_ += e),
                                (b = c.csCode_),
                                this.retMsg_.push(
                                  "The annotation ".concat(
                                    e,
                                    " before the unit "
                                  ) +
                                    "code is invalid.\n" +
                                    this.vcMsgStart_ +
                                    c.csCode_ +
                                    this.vcMsgEnd_
                                ))
                              : this.retMsg_.push(
                                  "Unable to find a unit for ".concat(
                                    g,
                                    " that "
                                  ) + "follows the annotation ".concat(e, ".")
                                );
                          }
                        else
                          this.retMsg_.push(
                            "Unable to find a unit for ".concat(g).concat(e) +
                              "".concat(
                                h,
                                ".\nWe are not sure how to interpret text both before "
                              ) +
                              "and after the annotation.  Sorry"
                          );
                      else {
                        var m = "[" + e.substring(1, e.length - 1) + "]",
                          n = this._makeUnit(m, b);
                        n[0]
                          ? ((c = n[0]),
                            (b = b.replace(e, m)),
                            this.retMsg_.push(
                              "".concat(
                                e,
                                " is not a valid unit expression, but "
                              ) +
                                "".concat(m, " is.\n") +
                                this.vcMsgStart_ +
                                ""
                                  .concat(m, " (")
                                  .concat(c.name_, ")")
                                  .concat(this.vcMsgEnd_)
                            ))
                          : (this.retMsg_.length > i && this.retMsg_.pop(),
                            (a = 1),
                            (c = 1));
                      }
                      return [c, b];
                    },
                  },
                  {
                    key: "_performUnitArithmetic",
                    value: function (a, b) {
                      var c = a[0].un;
                      k.isIntegerUnit(c) &&
                        (c = new m({
                          csCode_: c,
                          magnitude_: Number(c),
                          name_: c,
                        }));
                      for (var d = a.length, e = !1, f = 1; f < d && !e; f++) {
                        var g = a[f].un;
                        if (
                          (k.isIntegerUnit(g) &&
                            (g = new m({
                              csCode_: g,
                              magnitude_: Number(g),
                              name_: g,
                            })),
                          null === g ||
                            ("number" != typeof g && !g.getProperty))
                        ) {
                          var h =
                            "Unit string (".concat(
                              b,
                              ") contains unrecognized "
                            ) + "element";
                          g &&
                            (h +=
                              " (".concat(this.openEmph_).concat(g.toString()) +
                              "".concat(this.closeEmph_, ")")),
                            (h += "; could not parse full string.  Sorry"),
                            this.retMsg_.push(h),
                            (e = !0);
                        } else
                          try {
                            var i = a[f].op;
                            c = "/" === i ? c.divide(g) : c.multiplyThese(g);
                          } catch (a) {
                            this.retMsg_.unshift(a.message),
                              (e = !0),
                              (c = null);
                          }
                      }
                      return c;
                    },
                  },
                  {
                    key: "_isCodeWithExponent",
                    value: function (a) {
                      var b = [],
                        c = a.match(/(^[^\-\+]+?)([\-\+\d]+)$/);
                      return (
                        c && c[2] && "" !== c[2]
                          ? (b.push(c[1]), b.push(c[2]))
                          : (b = null),
                        b
                      );
                    },
                  },
                ]),
                a
              );
            })();
          (c.UnitString = p),
            (p.getInstance = function () {
              return new p();
            });
        },
        {
          "./config.js": 4,
          "./prefixTables.js": 8,
          "./ucumInternalUtils.js": 10,
          "./unit.js": 14,
          "./unitTables.js": 16,
        },
      ],
      16: [
        function (a, b, c) {
          "use strict";
          function d(a, b) {
            if (!(a instanceof b))
              throw new TypeError("Cannot call a class as a function");
          }
          function e(a, b) {
            for (var c = 0; c < b.length; c++) {
              var d = b[c];
              (d.enumerable = d.enumerable || !1),
                (d.configurable = !0),
                "value" in d && (d.writable = !0),
                Object.defineProperty(a, d.key, d);
            }
          }
          function f(a, b, c) {
            return b && e(a.prototype, b), c && e(a, c), a;
          }
          Object.defineProperty(c, "__esModule", { value: !0 }),
            (c.UnitTables = void 0);
          var g = a("./config.js").Ucum,
            h = (function () {
              function a() {
                d(this, a),
                  (this.unitNames_ = {}),
                  (this.unitCodes_ = {}),
                  (this.codeOrder_ = []),
                  (this.unitStrings_ = {}),
                  (this.unitDimensions_ = {}),
                  (this.unitSynonyms_ = {}),
                  (this.massDimIndex_ = 0);
              }
              return (
                f(a, [
                  {
                    key: "unitsCount",
                    value: function () {
                      return Object.keys(this.unitCodes_).length;
                    },
                  },
                  {
                    key: "addUnit",
                    value: function (a) {
                      a.name_ && this.addUnitName(a),
                        this.addUnitCode(a),
                        this.addUnitString(a);
                      try {
                        a.dim_.getProperty("dimVec_") &&
                          this.addUnitDimension(a);
                      } catch (a) {}
                    },
                  },
                  {
                    key: "addUnitName",
                    value: function (a) {
                      var b = a.name_;
                      if (!b)
                        throw new Error(
                          "UnitTables.addUnitName called for a unit with no name.  " +
                            "Unit code = ".concat(a.csCode_, ".")
                        );
                      this.unitNames_[b]
                        ? this.unitNames_[b].push(a)
                        : (this.unitNames_[b] = [a]);
                    },
                  },
                  {
                    key: "addUnitCode",
                    value: function (a) {
                      var b = a.csCode_;
                      if (!b)
                        throw new Error(
                          "UnitTables.addUnitCode called for unit that has no code."
                        );
                      if (this.unitCodes_[b])
                        throw new Error(
                          "UnitTables.addUnitCode called, already contains entry for " +
                            "unit with code = ".concat(b)
                        );
                      if (
                        ((this.unitCodes_[b] = a),
                        this.codeOrder_.push(b),
                        "g" == b)
                      ) {
                        for (
                          var c = a.dim_.dimVec_, d = 0;
                          d < c.length && c[d] < 1;
                          d++
                        );
                        this.massDimIndex_ = d;
                      }
                    },
                  },
                  {
                    key: "addUnitString",
                    value: function (a) {
                      var b = null;
                      if (
                        (b =
                          1 == g.caseSensitive_
                            ? a.csUnitString_
                            : a.ciUnitString_)
                      ) {
                        var c = { mag: a.baseFactorStr_, unit: a };
                        this.unitStrings_[b]
                          ? this.unitStrings_[b].push(c)
                          : (this.unitStrings_[b] = [c]);
                      }
                    },
                  },
                  {
                    key: "addUnitDimension",
                    value: function (a) {
                      var b = a.dim_.getProperty("dimVec_");
                      if (!b)
                        throw new Error(
                          "UnitTables.addUnitDimension called for a unit with no dimension.  " +
                            "Unit code = ".concat(a.csCode_, ".")
                        );
                      this.unitDimensions_[b]
                        ? this.unitDimensions_[b].push(a)
                        : (this.unitDimensions_[b] = [a]);
                    },
                  },
                  {
                    key: "buildUnitSynonyms",
                    value: function () {
                      for (var a in this.unitCodes_) {
                        var b = this.unitCodes_[a],
                          c = b.synonyms_;
                        if (c) {
                          var d = c.split(";");
                          if ("" !== d[0])
                            for (var e = d.length, f = 0; f < e; f++) {
                              var g = d[f].trim();
                              this.addSynonymCodes(a, g);
                            }
                        }
                        this.addSynonymCodes(a, b.name_);
                      }
                    },
                  },
                  {
                    key: "addSynonymCodes",
                    value: function (a, b) {
                      for (
                        var c = b.split(" "), d = c.length, e = 0;
                        e < d;
                        e++
                      ) {
                        var f = c[e];
                        if (this.unitSynonyms_[f]) {
                          -1 === this.unitSynonyms_[f].indexOf(a) &&
                            this.unitSynonyms_[f].push(a);
                        } else this.unitSynonyms_[f] = [a];
                      }
                    },
                  },
                  {
                    key: "getUnitByCode",
                    value: function (a) {
                      var b = null;
                      return a && (b = this.unitCodes_[a]), b;
                    },
                  },
                  {
                    key: "getUnitByName",
                    value: function (a) {
                      if (null === a || void 0 === a)
                        throw new Error(
                          "Unable to find unit by name because no name was provided."
                        );
                      var b = a.indexOf(g.codeSep_),
                        c = null;
                      b >= 1 &&
                        ((c = a.substr(b + g.codeSep_.length)),
                        (a = a.substr(0, b)));
                      var d = this.unitNames_[a];
                      if (d) {
                        var e = d.length;
                        if (c && e > 1) {
                          for (var f = 0; d[f].csCode_ !== c && f < e; f++);
                          d = f < e ? [d[f]] : null;
                        }
                      }
                      return d;
                    },
                  },
                  {
                    key: "getUnitByString",
                    value: function (a) {
                      var b = null;
                      return (
                        a &&
                          void 0 === (b = this.unitStrings_[a]) &&
                          (b = null),
                        b
                      );
                    },
                  },
                  {
                    key: "getUnitsByDimension",
                    value: function (a) {
                      var b = null;
                      if (null === a || void 0 === a)
                        throw new Error(
                          "Unable to find unit by because no dimension vector was provided."
                        );
                      return (
                        (b = this.unitDimensions_[a]),
                        (void 0 !== b && null !== b) ||
                          console.log(
                            "Unable to find unit with dimension = ".concat(a)
                          ),
                        b
                      );
                    },
                  },
                  {
                    key: "getUnitBySynonym",
                    value: function (a) {
                      var b = {},
                        c = [];
                      try {
                        if (null === a || void 0 === a)
                          throw (
                            ((b.status = "error"),
                            new Error(
                              "Unable to find unit by synonym because no synonym was provided."
                            ))
                          );
                        0 === Object.keys(this.unitSynonyms_).length &&
                          this.buildUnitSynonyms();
                        var d = [];
                        if ((d = this.unitSynonyms_[a])) {
                          b.status = "succeeded";
                          for (var e = d.length, f = 0; f < e; f++)
                            c.push(this.unitCodes_[d[f]]);
                          b.units = c;
                        }
                        0 === c.length &&
                          ((b.status = "failed"),
                          (b.msg =
                            "Unable to find any units with synonym = ".concat(
                              a
                            )));
                      } catch (a) {
                        b.msg = a.message;
                      }
                      return b;
                    },
                  },
                  {
                    key: "getAllUnitNames",
                    value: function () {
                      return Object.keys(this.unitNames_);
                    },
                  },
                  {
                    key: "getUnitNamesList",
                    value: function () {
                      var a = [],
                        b = Object.keys(this.unitCodes_);
                      b.sort(this.compareCodes);
                      for (var c = b.length, d = 0; d < c; d++)
                        a[d] = b[d] + g.codeSep_ + this.unitCodes_[b[d]].name_;
                      return a;
                    },
                  },
                  {
                    key: "getMassDimensionIndex",
                    value: function () {
                      return this.massDimIndex_;
                    },
                  },
                  {
                    key: "compareCodes",
                    value: function (a, b) {
                      return (
                        (a = a.replace(/[\[\]]/g, "")),
                        (a = a.toLowerCase()),
                        (b = b.replace(/[\[\]]/g, "")),
                        (b = b.toLowerCase()),
                        a < b ? -1 : 1
                      );
                    },
                  },
                  {
                    key: "getAllUnitCodes",
                    value: function () {
                      return Object.keys(this.unitCodes_);
                    },
                  },
                  {
                    key: "allUnitsByDef",
                    value: function () {
                      for (
                        var a = [], b = this.codeOrder_.length, c = 0;
                        c < b;
                        c++
                      )
                        a.push(this.getUnitByCode(this.codeOrder_[c]));
                      return a;
                    },
                  },
                  {
                    key: "allUnitsByName",
                    value: function (a, b) {
                      (void 0 !== b && null !== b) || (b = "|");
                      for (
                        var c = "",
                          d = this.getAllUnitNames(),
                          e = d.length,
                          f = a.length,
                          g = 0;
                        g < e;
                        g++
                      )
                        for (
                          var h = this.getUnitByName(d[g]), i = 0;
                          i < h.length;
                          i++
                        ) {
                          for (var j = h[i], k = 0; k < f; k++)
                            if ((k > 0 && (c += b), "dim_" === a[k]))
                              null !== j.dim_ &&
                              void 0 !== j.dim_ &&
                              j.dim_.dimVec_ instanceof Array
                                ? (c += "[" + j.dim_.dimVec_.join(",") + "]")
                                : (c += "");
                            else {
                              var l = j[a[k]];
                              c +=
                                "string" == typeof l
                                  ? l.replace(/[\n\r]/g, " ")
                                  : l;
                            }
                          c += "\r\n";
                        }
                      return c;
                    },
                  },
                  {
                    key: "printUnits",
                    value: function (a, b) {
                      void 0 === a && (a = !1), void 0 === b && (b = "|");
                      var c = "",
                        d = this.codeOrder_.length,
                        e = "csCode" + b;
                      a && (e += "ciCode" + b),
                        (e += "name" + b),
                        a && (e += "isBase" + b),
                        (e +=
                          "magnitude" +
                          b +
                          "dimension" +
                          b +
                          "from unit(s)" +
                          b +
                          "value" +
                          b +
                          "function" +
                          b),
                        a &&
                          (e +=
                            "property" +
                            b +
                            "printSymbol" +
                            b +
                            "synonyms" +
                            b +
                            "source" +
                            b +
                            "class" +
                            b +
                            "isMetric" +
                            b +
                            "variable" +
                            b +
                            "isSpecial" +
                            b +
                            "isAbitrary" +
                            b),
                        (e += "comment"),
                        (c = e + "\n");
                      for (var f = 0; f < d; f++) {
                        var g = this.getUnitByCode(this.codeOrder_[f]);
                        (e = this.codeOrder_[f] + b),
                          a && (e += g.getProperty("ciCode_") + b),
                          (e += g.getProperty("name_") + b),
                          a &&
                            (g.getProperty("isBase_")
                              ? (e += "true" + b)
                              : (e += "false" + b)),
                          (e += g.getProperty("magnitude_") + b);
                        var h = g.getProperty("dim_");
                        (e += h ? h.dimVec_ + b : "null" + b),
                          g.csUnitString_
                            ? (e += g.csUnitString_ + b + g.baseFactor_ + b)
                            : (e += "null" + b + "null" + b),
                          g.cnv_ ? (e += g.cnv_ + b) : (e += "null" + b),
                          a &&
                            (e +=
                              g.getProperty("property_") +
                              b +
                              g.getProperty("printSymbol_") +
                              b +
                              g.getProperty("synonyms_") +
                              b +
                              g.getProperty("source_") +
                              b +
                              g.getProperty("class_") +
                              b +
                              g.getProperty("isMetric_") +
                              b +
                              g.getProperty("variable_") +
                              b +
                              g.getProperty("isSpecial_") +
                              b +
                              g.getProperty("isArbitrary_") +
                              b),
                          g.defError_ &&
                            (e +=
                              "problem parsing this one, deferred to later."),
                          (c += e + "\n");
                      }
                      return c;
                    },
                  },
                ]),
                a
              );
            })(),
            i = new h(),
            j = {
              getInstance: function () {
                return i;
              },
            };
          c.UnitTables = j;
        },
        { "./config.js": 4 },
      ],
    },
    {},
    [13]
  )(13);
});
//# sourceMappingURL=ucum-lhc.min.js.map
